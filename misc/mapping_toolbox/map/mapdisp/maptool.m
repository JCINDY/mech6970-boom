function h = maptool(varargin)
%MAPTOOL Add menu activated tools to map figure
%
%  MAPTOOL creates a figure window with a map axes and activates
%  the interactive tool for specifying a map projection.
%
%  MAPTOOL ProjectionName creates a figure window with the default
%  projection specified by ProjectionName.
%
%  MAPTOOL('MapPropertyName',MapPropertyValue,...) creates a figure
%  window and defines a map axes using the supplied Map properties.
%  MAPTOOL supports all the same properties as AXESM.
%
%  h = MAPTOOL(...) returns a two element vector containing the
%  handle of the Maptool figure window and the handle of the map axes.
%
%  See also AXESM.

% Copyright 1996-2010 The MathWorks, Inc.
% $Revision: 1.19.4.15 $  $Date: 2010/08/07 07:28:19 $
% Written by:  E. Byrns, E. Brown

if nargin == 0 || ~isempty(varargin{1})
    hndl = INITmaptool(varargin{:});   %  Initialize the map figure window
    if ischar(hndl);
        error(['map:' mfilename ':mapdispError'], hndl);
    else
        if nargout == 1;
            h = hndl;
        end
    end
elseif isempty(varargin{1}) && nargin >= 2
    mapcalls(varargin{:})          %  Figurem callback
end

%--------------------------------------------------------
function hndl = INITmaptool(varargin)

%  INITMAPTOOL initializes the maptool window, mouse tools uicontrols,
%  the tool menu choices and the colormap menu.  A map axes
%  is also created, with a Robinson projection specified as
%  a default.

%  Create a new figure window.
%  Ensure V5 color defaults

% hndl(1) = figure('Tag','Map Tool Window',...
%                  'ButtonDownFcn','uimaptbx',...
%                  'CloseRequestFcn','maptool([],''close'')');
hndl(1) = gcf;

% Turn off the plot edit Tools menu
plotedit(hndl(1),'hidetoolsmenu');

if strcmp(get(hndl(1),'Tag'),'Map Tool Window')
    error(['map:' mfilename ':mapdispError'], 'Maptools already applied to figure')
end
set(hndl(1),'Tag','Map Tool Window',...
    'ButtonDownFcn','uimaptbx',...
    'CloseRequestFcn','maptool([],''close'')');

%  Colors for the uicontrols

framecolor = brighten(get(hndl(1),'Color'),0.8);

%  Ensure that fonts look OK across platforms

FontScaling =  guifactm('fonts');

%  Create the mouse tool box and radio buttons.  Initially, these
%  controls are visible, but no tool is selected

uicontrol(hndl(1),'Style','Frame',...
    'Units','Normalized','Position',[.01 .78 .14 .20],...
    'ForegroundColor', 'black', 'BackgroundColor', framecolor);

uicontrol(hndl(1),'Style','Push','String','Zoom',...
    'Units','Normalized','Position',[.02 .91 .12 .06],...
    'FontWeight','normal',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Tag','off', ...
    'ForegroundColor', 'black', 'BackgroundColor', framecolor,...
    'Interruptible','on', 'CallBack','maptool([],''zoom'')');

uicontrol(hndl(1),'Style','Push','String','Rotate',...
    'Units','Normalized','Position',[.02 .85 .12 .06],...
    'FontWeight','normal',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Tag','off', ...
    'ForegroundColor', 'black', 'BackgroundColor', framecolor,...
    'Interruptible','on', 'CallBack','maptool([],''rotate'')');

uicontrol(hndl(1),'Style','Push','String','Origin',...
    'Units','Normalized','Position',[.02 .79 .12 .06],...
    'FontWeight','normal',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Tag','off', ...
    'ForegroundColor', 'black', 'BackgroundColor', framecolor,...
    'Interruptible','on', 'CallBack','maptool([],''origin'')');

%  Create the session menu and its submenu items
%  Set the parts of the load callback strings

msgstr = '{''''Operation successful.'''','''' '''',''''Use Session/Variables to view workspace variables.''''}';
titlestr = '''''Status Report''''';
str = ['uiwait(msgbox(',msgstr,',',titlestr,',''''modal''''))'''];
errorstr = '''uiwait(errordlg(''''Error encountered while performing menu operation.'''',''''Operation Error'''',''''modal''''))''';


h = uimenu(hndl(1),'Label','Session');
hsub = uimenu(h,'Label','Load');
uimenu(hsub,'Label','Specify Workspace','Interruptible','on', ...
    'CallBack','maptool([],''loadvar'')')
hsub = uimenu(h,'Label','Layers');
uimenu(hsub,'Label','Workspace','Interruptible','on',...
    'CallBack',['eval(''rootlayr;mlayers(ans);'',',errorstr,' )'])
uimenu(hsub,'Label','Other','Interruptible','on',...
    'CallBack','maptool([],''loadlayer'')')
uimenu(h,'Label','Variables',...
    'CallBack','maptool([],''variables'',who)');
uimenu(h,'Label','Command','Interruptible','on','CallBack','maptool([],''createvar'')');
hsub = uimenu(h,'Label','Clear', 'Separator','on');
uimenu(hsub,'Label','Specify Variables','Interruptible','on', 'CallBack','maptool([],''clearvar'')')
uimenu(hsub,'Label','Workspace',...
    'CallBack',['eval(''clear;',str,',',errorstr,' )'])
uimenu(hsub,'Label','Globals',...
    'CallBack',['eval(''clear global;',str,',',errorstr,' )'])
uimenu(hsub,'Label','Functions',...
    'CallBack',['eval(''clear functions;',str,',',errorstr,' )'])
uimenu(hsub,'Label','Mex',...
    'CallBack',['eval(''clear mex;',str,',',errorstr,' )'])
uimenu(hsub,'Label','All',...
    'CallBack',['eval(''clear all;',str,',',errorstr,' )'])

%  Create the project menu and its submenu items
h = uimenu(hndl(1),'Label','Map');
uimenu(h,'Label','Lines','Interruptible','on','CallBack',@linemui)
uimenu(h,'Label','Patches','Interruptible','on','CallBack',@patchesmui)
uimenu(h,'Label','Regular Surfaces','Interruptible','on','CallBack',@meshmui,'Separator','on')
uimenu(h,'Label','General Surfaces','Interruptible','on','CallBack',@surfacemui)
uimenu(h,'Label','Regular Shaded Relief','Interruptible','on','CallBack',@meshlsrmui,'Separator','on')
uimenu(h,'Label','General  Shaded Relief','Interruptible','on','CallBack',@surflsrmui)
uimenu(h,'Label','Contour Lines','Interruptible','on', 'CallBack',@contour3mui,'Separator','on')
uimenu(h,'Label','Filled Contours','Interruptible','on', 'CallBack',@contourfmui)
uimenu(h,'Label','Quiver 2D','Interruptible','on','CallBack',@quivermui);
uimenu(h,'Label','Quiver 3D','Interruptible','on','CallBack',@quiver3mui);
uimenu(h,'Label','Stem','Interruptible','on','CallBack',@stem3mui)
uimenu(h,'Label','Scatter','Interruptible','on','CallBack',@scattermui)
uimenu(h,'Label','Text','Interruptible','on','Separator','on','CallBack',@textmui)
uimenu(h,'Label','Light','Interruptible','on','CallBack',@lightmui)

%  Create the display menu and its submenu items
h = uimenu(hndl(1),'Label','Display');
uimenu(h,'Label','Projection','Interruptible','on', 'CallBack','axesmui');
uimenu(h,'Label','Graticule','Interruptible','on','Separator','on',...
    'CallBack','maptool([],''meshgrat'')')
uimenu(h,'Label','Legend','Interruptible','on',...
    'CallBack','maptool([],''legendON'')')
uimenu(h,'Label','Frame','Interruptible','on','Separator','on','CallBack','framem');
uimenu(h,'Label','Grid','Interruptible','on','CallBack','gridm');
uimenu(h,'Label','Meridian Labels','Interruptible','on','CallBack','mlabel');
uimenu(h,'Label','Parallel Labels','Interruptible','on','CallBack','plabel');
uimenu(h,'Label','Tracks','Interruptible','on',...
    'Separator','on','CallBack','trackui(gca)');
uimenu(h,'Label','Small Circles','Interruptible','on',...
    'CallBack','scirclui(gca)');
uimenu(h,'Label','Surface Distances','Interruptible','on',...
    'CallBack','surfdist(gca)');

hsub = uimenu(h,'Label','Map Distortion','Separator','on');
uimenu(hsub,'Label','Angles', 'CallBack','mdistort angles')
uimenu(hsub,'Label','Area', 'CallBack','mdistort area')
uimenu(hsub,'Label','Scale', 'CallBack','mdistort scale')
uimenu(hsub,'Label','Off', 'CallBack','mdistort off')

uimenu(h,'Label','Scale Ruler', 'CallBack','scaleruler'); % toggle

uimenu(h,'Label','Print Preview','Separator','on','CallBack','previewmap');

%  Create the tool menu and its submenu items
h = uimenu(hndl(1),'Label','Tools');
uimenu(h,'Label','Hide','CallBack','maptool([],''toolhide'')');
uimenu(h,'Label','Off','CallBack','maptool([],''tooloff'')');
uimenu(h,'Label','Rotate','Separator','on','Interruptible','on',...
    'CallBack','maptool([],''rotate'')');
uimenu(h,'Label','Origin','Interruptible','on',...
    'CallBack','maptool([],''origin'')');
uimenu(h,'Label','Parallels','Interruptible','on',...
    'CallBack','maptool([],''parallel'')');
uimenu(h,'Label','Zoom Tool','Interruptible','on',...
    'Separator','on','CallBack','maptool([],''zoom'')');
uimenu(h,'Label','Set Limits', 'CallBack','panzoom setlimits');
uimenu(h,'Label','Full View', 'CallBack','panzoom fullview');

uimenu(h,'Label','2D View','Interruptible','on',...
    'Separator','on','CallBack','view(2)');

uimenu(h,'Label','Tight Map', 'CallBack','tightmap','Separator','on');
uimenu(h,'Label','Loose Map', 'CallBack','axis auto');
uimenu(h,'Label','Fill Figure', 'Separator','on',...
    'CallBack','units = get(gca,''Units''); set(gca,''Units'',''normalized'',''Position'',[0 0 1 1]); set(gca,''Units'',units)')
uimenu(h,'Label','Default Size',...
    'CallBack','units = get(gca,''Units''); set(gca,''Units'',''normalized'',''Position'',get(0,''factoryAxesPosition'')); set(gca,''Units'',units)')

uimenu(h,'Label','Objects','Interruptible','on',...
    'Separator','on','CallBack','mobjects(gca)');
hsub = uimenu(h,'Label','Edit','Separator','on');
uimenu(hsub,'Label','Current Object','Interruptible','on',...
    'CallBack',['get(get(0,''CurrentFigure''),''CurrentObject'');',...
    'if ~isempty(ans);propedit(ans);else;',...
    'uiwait(errordlg(''No current object'',''Edit Error'',''modal'')); end']);
uimenu(hsub,'Label','Select Object','Interruptible','on',...
    'CallBack',...
    'handlem taglist;if ~isempty(ans);propedit(ans(1));end');
uimenu(hsub,'Label','Last Object','Interruptible','on',...
    'CallBack','maptool([],''lastobject'')')
hsub = uimenu(h,'Label','Show');
uimenu(hsub,'Label','All','Interruptible','on','CallBack','showm(''hidden'')');
uimenu(hsub,'Label','Object','Interruptible','on','CallBack','showm(''taglist'')');
hsub = uimenu(h,'Label','Hide');
uimenu(hsub,'Label','All','Interruptible','on','CallBack','hidem(''all'')');
uimenu(hsub,'Label','Map','Interruptible','on','CallBack','hidem(''map'')');
uimenu(hsub,'Label','Object','Interruptible','on','CallBack','hidem(''taglist'')');
hsub = uimenu(h,'Label','Delete');
uimenu(hsub,'Label','All','Interruptible','on','CallBack','clma(''all'')');
uimenu(hsub,'Label','Map','Interruptible','on','CallBack','clma');
uimenu(hsub,'Label','Object','Interruptible','on','CallBack','clmo(''taglist'')');

hsub = uimenu(h,'Label','Axes','Separator','on');
uimenu(hsub,'Label','Show', 'CallBack','showaxes(''on'')')
uimenu(hsub,'Label','Hide', 'CallBack','showaxes(''off'')')
uimenu(hsub,'Label','Visible', 'CallBack','showm(gca)')
uimenu(hsub,'Label','Invisible', 'CallBack','hidem(gca)')
uimenu(hsub,'Label','Color','Interruptible','on', ...
    'CallBack',...
    'showaxes(uisetcolor(get(gca,''XColor''),''Axes Color''));')

%  Add the colormap menu bar
clrmenu

%  Initialize the map axes
hndl(2) = gca;
% set(gca,'Position',[0.13  0.20  0.775  0.72]);

if isempty(varargin);
    if ~ismap(gca);
        cancelflag = axesm;
        if cancelflag
            clma purge ;
        end % was delete(hndl(1))
    end
else
    if ismap(gca);
        if mod(length(varargin),2)==0
            setm(gca,varargin{:});
        else
            setm(gca,'MapProjection',varargin{:});
        end
    else
        try
            axesm(varargin{:});
        catch e
            delete(hndl(1));
            hndl=e.message;
            return
        end
    end
end

%--------------------------------------------------------
function mapcalls(varargin)

%  MAPCALLS performs all the callbacks for MAPTOOL.

%  The empty first input is used to indicate a mapcall callback
%  versus a maptool call with map axes property inputs.  The action
%  string is contained in the second input position.


%  For each tool action below, the following steps are taken:
%     1.  Determine if the callback originated at the radio button
%         or the menu item
%     2.  Set the handle to the radio button uicontrol
%     3.  Turn on or off the tool.  If the tool is turned on, then
%         turn off any other tool which may be on.

switch varargin{2}
    case 'close'         %  Close workspace
        ButtonName = questdlg('Are You Sure?','Confirm Closing','Yes','No','No');
        if strcmp(ButtonName,'Yes')
            delete(get(0,'CurrentFigure'))
        end

    case 'variables'         %  List the variables in the root workspace
        varlist(varargin{3})

    case 'loadlayer'         %  Load a data layer workspace
        prompt   = 'Workspace With Layer Data';
        titlestr = 'Specify Layer Workspace';
        answer = {' '};
        while 1
            answer=inputdlg(prompt,titlestr,1,answer(1));
            if ~isempty(answer)
                try
                    mlayers(answer{1});
                    break;
                catch e
                    uiwait(errordlg(e.message,'Load Layer Error','modal'));
                end
            else
                break;
            end
        end

    case 'clearvar'         %  Clear workspace variables selection

        %  Workspacedlg is needed to perform the operations in the
        %  user workspace and not the local workspace for this function

        workspacedlg('Specify variables:','Variables To Clear','',1)

    case 'createvar'        %  Create workspace variables
        workspacedlg('Statements to execute:','Workspace Commands','',0)

    case 'loadvar'        %  Load workspace variables
        workspacedlg('Workspace name:','Load Workspace','',2)

    case 'meshgrat'         %  Reset the Graticule of a regular surface map
        hndl = get(gcf,'CurrentObject');

        if isempty(hndl)
            uiwait(errordlg('No current object available','Selection Error','modal'))
        elseif ~ismapped(hndl)
            uiwait(errordlg('Current object is not mapped','Selection Error','modal'))
        else
            userdata = get(hndl,'UserData');
            mfields = char(fieldnames(userdata));
            indx = strmatch('maplegend',mfields,'exact');
            if length(indx) ~= 1
                uiwait(errordlg('Current object is not a regular surface map',...
                    'Selection Error','modal'))
            else
                prompt   = 'Edit Graticule size (2 element vector):';
                titlestr = 'Graticule Mesh';
                answer = {['[',num2str(size(get(hndl,'Xdata'))),']']};

                while 1
                    answer=inputdlg(prompt,titlestr,1,answer(1));

                    if ~isempty(answer)
                        try
                            setm(hndl, 'MeshGrat', str2num(answer{1}));
                            break;
                        catch e
                            uiwait(errordlg(e.message,'Graticule Mesh Error','modal'))
                        end
                    else
                        break
                    end
                end
            end
        end

    case 'zoom'         %  Pan Zoom selection

        if ishghandle(gco,'uicontrol');
            hndl = gco;
        else
            hndl = findobj(gcf,'Type','uicontrol','String','Zoom');
            set(hndl,'Value',~get(hndl,'Value'))
        end

        if strcmp(get(hndl,'FontWeight'),'normal')
            set(hndl,'FontWeight','bold','Tag','on');
            tooloff(hndl);
            panzoom('on')
            set(hndl,'KeyPressFcn',get(gcf,'KeyPressFcn'));
        else
            set(hndl,'FontWeight','normal','Tag','off');
            panzoom('off')
            set(hndl,'KeyPressFcn','');
        end


    case 'rotate'       %  Rotate3D selection
        if ishghandle(gco,'uicontrol');
            hndl = gco;
        else
            hndl = findobj(gcf,'Type','uicontrol','String','Rotate');
            set(hndl,'Value',~get(hndl,'Value'))
        end

        if strcmp(get(hndl,'FontWeight'),'normal')
            set(hndl,'FontWeight','bold','Tag','on');
            tooloff(hndl);  rotate3d('on')
        else
            set(hndl,'FontWeight','normal','Tag','off');
            rotate3d('off')
        end

    case 'parallel'       %  parallelui selection
        parallelui % toggle
    case 'origin'      %  Originui selection
        if ishghandle(gco,'uicontrol');
            hndl = gco;
        else
            hndl = findobj(gcf,'Type','uicontrol','String','Origin');
            set(hndl,'Value',~get(hndl,'Value'))
        end

        if strcmp(get(hndl,'FontWeight'),'normal')
            set(hndl,'FontWeight','bold','Tag','on');
            tooloff(hndl);  originui('on')
            set(hndl,'KeyPressFcn',get(gcf,'KeyPressFcn'));
        else
            set(hndl,'FontWeight','normal','Tag','off');
            originui('off')
            set(hndl,'KeyPressFcn','');
        end

    case 'toolhide'      %  Hide the mouse tool uicontrols (menu choice)
        set(gcbo,'Label','Show','CallBack','maptool([],''toolshow'')');
        set(findobj(gcf,'Type','uicontrol'),'Visible','off')
        % 	  if ismap;set(gca,'Units','Normalized','Position',[0.13  0.11  0.775  0.815]);end

    case 'toolshow'      %  Show the mouse tool uicontrols (menu choice)
        set(gcbo,'Label','Hide','CallBack','maptool([],''toolhide'')');
        set(findobj(gcf,'Type','uicontrol'),'Visible','on')
        % 	  if ismap; set(gca,'Units','Normalized','Position',[0.13  0.20  0.775  0.72]); end


    case 'tooloff', tooloff       %  Turn off the mouse tools (menu choice)

    case 'lastobject'
        children = get(gca,'children');

        %  Eliminate objects from list if their handles are hidden.
        if length(children) == 1
            if strcmp(get(children,'HandleVisibility'),'off');
                indx = 1;
            else
                indx = [];
            end
        elseif ~isempty(children)
            hidden = get(children,'HandleVisibility');
            indx = strmatch('off',char(hidden));
        else
            indx = [];
        end
        if ~isempty(indx)
            children(indx) = [];
        end

        %  Activate propedit if at least one object remains
        if ~isempty(children)
            propedit(children(1))
        else
            uiwait(errordlg('No objects on axes',...
                'Selection Error','modal'))
        end

    case 'legendON'

        children = get(gca,'children');
        legndhndl = findobj(gcf,'Type','axes','Tag','legend');

        %  Allow abort if legend already exists
        if ~isempty(legndhndl)
            btn = questdlg('Legend will be deleted.  Continue?','Confirm Legend','Yes','No','No');
            if strcmp(btn,'No')
                set(gcbo,'Label','Legend Off','CallBack','maptool([],''legendOFF'')' )
                return
            end
        end

        %  Loop through the children and keep only the line handles
        %  Get their name (tag or handle) to use for the legend string
        hndl = [];   linename = [];
        for i = 1:length(children)
            if ishghandle(children(i),'line')
                if isempty(hndl)
                    hndl = children(i);
                    linename = namem(children(i));
                else
                    hndl = [hndl;children(i)];
                    linename = str2mat(linename,namem(children(i)));
                end
            end
        end

        %  If no lines remain, simply warn and end
        if isempty(hndl)
            uiwait(errordlg('No Lines on Map Axes','MapTool Warning','modal'));
            return
        end

        %  Add the legend object off the axes
        legend(hndl,linename,-1);

        %  Set the menu to delete the displayed legend
        set(gcbo,'Label','Legend Off','CallBack','maptool([],''legendOFF'')' )

    case 'legendOFF'   %  Delete the shown legend
        legend off
        set(gcbo,'Label','Legend','CallBack','maptool([],''legendON'')' )
end

%--------------------------------------------------------
function tooloff(except)
%  TOOLOFF turns off the mouse tools and sets the corresponding
%  radio button value to zero.  The exception to turning off the
%  tools may be provided by the input argument.  This allows
%  one tool to be left on.  This operation provides the mutual
%  exclusiveness necessary for the radio button operation.  Note
%  that the RadioGroup property can not be used with the radio
%  buttons because the tool function must also be turned off
%  when the button value is set to zero.

if nargin == 0
    except = [];
end   %  Default is all off

%  Determine the handles of the radio buttons.  Eliminate an
%  exception button from this list.
hindx = findobj(gcf,'Type','uicontrol','Tag','on');
if ~isempty(except)
    hindx(hindx == except) = [];
end

%  Determine any other radio buttons which may be on

if ~isempty(hindx)         %  Turn these buttons (and operations) off
    set(hindx,'Tag','off','FontWeight','normal');
    switch get(hindx,'String')     %  Turn off the appropriate tool
        case 'Zoom',      panzoom('off')
        case 'Rotate',    rotate3d('off')
        case 'Origin',    originui('off')
        case 'Parallel',  disp('No parallel option in TOOLOFF')
        otherwise
            uiwait(errordlg('Unrecognized radio button string in TOOLOFF',...
                'MapTool Error','modal'))
    end
end

%-----------------------------------------------------------------
function workspacedlg(prompt,titlestr,def,option)
%  WORKSPACEDLG creates the dialog box to allow the user to enter in
%  the workspaces command.  It is called from MAPTOOL to
%  workr variables in the USER's WORKSPACE not the workspace local
%  to MAPTOOL.m

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = workspacebox(prompt,titlestr,def,option);
    uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    str = get(h.txtedit,'String');
    def = str;  %  Get the string entry and save a copy
    btn = get(h.fig,'CurrentObject');
    delete(h.fig)

    if btn == h.apply

        if ~isempty(str)
            indx = find(str == 0);     %  Replace nulls, but not blanks
            if ~isempty(indx);
                str(indx) = ' ';
            end

            switch option
                case 0            %  Command to execute
                    str(:,size(str,2)+1) = ';';
                    str = str(:)';
                    str = str(str~=0);
                case 1           %  Clear variable
                    str(:,size(str,2)+1) = ' ';
                    str = str(:)';
                    str = ['clear ',str(str~=0)];

                case 2           %  Workspace Load Command
                    str(:,size(str,2)+1) = ' ';
                    str = str(:)';
                    str = ['load ',str(str~=0)];
            end

            try
                evalin('base', str);
                uiwait(msgbox({'Operation successful.',' ',...
                    'Use Session/Variables to view workspace variables'},...
                    'Status Report','modal'))
                break % Break loop with no errors
            end
        end
    else
        break             %  Exit the loop
    end
end

%-------------------------------------------------------
function h = workspacebox(prompt,titlestr,def,option)
%  WORKSPACEBOX creates the dialog box and places the appropriate
%  objects for the WORKSPACEDLG function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn

h.fig = dialog('Name',titlestr,...
    'Units','Points',  'Position',PixelFactor*72*[2 1.5 4 1.5], 'Visible','off');
colordef(h.fig,'white')
figclr = get(h.fig,'Color');

%  Text and Edit Box

h.txtlabel = uicontrol(h.fig,'Style','Text', 'String',prompt, ...
    'Units','Normalized','Position',[0.05  0.85  0.90  0.12], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment','left',...
    'ForegroundColor','black', 'BackgroundColor',figclr);

h.txtedit = uicontrol(h.fig,'Style','Edit', 'String',def, ...
    'Units','Normalized', 'Position',[0.05  .40  0.90  0.40], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, 'Tag','OK',...
    'HorizontalAlignment','left', 'Max',2,...
    'ForegroundColor','black', 'BackgroundColor',figclr);

if option == 1
    set(h.txtedit,'Position',[0.05  .50  0.70  0.20]);
    h.txtlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
        'Units','Normalized','Position', [0.77  .50  0.18  0.20], ...
        'FontWeight','bold',  'FontSize',FontScaling*9, ...
        'ForegroundColor', 'black','BackgroundColor', figclr,...
        'Interruptible','on', 'UserData',h.txtedit,...
        'CallBack','varpick(who,get(gco,''UserData''))');
end

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms
PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push', 'String','Apply', ...    %  Apply Button
    'Units','Points',  'Position',PixelFactor*72*[0.60  0.05  1.10  0.40], ...
    'FontWeight','bold',  'FontSize',FontScaling*12, ...
    'HorizontalAlignment','center', 'Tag','OK',...
    'ForegroundColor','black', 'BackgroundColor',figclr,...
    'Interruptible','on', 'CallBack','uiresume');

h.cancel = uicontrol(h.fig,'Style','Push', 'String','Cancel', ...    %  Cancel Button
    'Units','Points',  'Position',PixelFactor*72*[2.30  0.05  1.10  0.40], ...
    'FontWeight','bold',  'FontSize',FontScaling*12, ...
    'HorizontalAlignment','center', ...
    'ForegroundColor','black', 'BackgroundColor',figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on');

%----------------------------------------------------------------------
function varlist(vars)
%VARLIST  Dialog displaying the current variables in the workspace
%
%  VARLIST is used by MAPTOOLS to display the current variables
%  in the workspace.

if nargin ~= 1;
    error(['map:' mfilename ':mapdispError'], 'Incorrect number of arguments');
end

%  Make the variable list into a string matrix.

if isempty(vars)
    vars = ' ';
else
    vars = char(vars);
end

%  Empty argument tests
titlestr = 'Current Variables';
figsize  = [3 2 2.5 3];

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms
PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the list box in case the select button is pushed
h = dialog('Name',titlestr,...
    'Units','Points',  'Position',PixelFactor*72*figsize,...
    'Visible','off');
colordef(h,'white');
figclr = get(h,'Color');

%  Create the list box
uicontrol(h,'Style','List', 'String',vars ,...
    'Units','Normalized', 'Position',[0.10  0.30  0.80  0.60], ...
    'Max',1, ...
    'FontWeight','normal',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment','center', ...
    'ForegroundColor','black', 'BackgroundColor',figclr);

%  Buttons to exit the modal dialog
buttonsize = [0.875  0.5];      %  Button size in inches
xoffset = (figsize(3) - buttonsize(1) )/2;
btnpos = [xoffset 0.15 buttonsize];   %  Button Position in inches

uicontrol(h,'Style','Push', 'String', 'Close', ...    %  Close Button
    'Units','Points',  'Position',PixelFactor*72*btnpos, ...
    'FontWeight','bold',  'FontSize',FontScaling*12, ...
    'HorizontalAlignment','center', ...
    'ForegroundColor','black', 'BackgroundColor',figclr,...
    'CallBack','uiresume');

%  Turn dialog box on.  Then wait unit a button is pushed
set(h,'Visible','on')
uiwait(h)

if ~ishghandle(h)
    return;
end

%  Close the dialog box
delete(h)

%---------------------------------------------------------
function quivermui(~,~)
%  QUIVERMUI creates the dialog box to allow the user to enter in
%  the variable names for a quivem command.  It is called when
%  QUIVERM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.
%  Create axes if none found

if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No')
        return
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag
        clma purge;
        return
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = 'u';
str4 = 'v';
str5 = '';
str6 = '';
fill0 = 0;

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box

    h = QuivermUIBox(str1,str2,str3,str4,str5,str6,fill0);
    uiwait(h.fig)

    if ~ishghandle(h.fig)
        return
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.uedit,'String');
        str4 = get(h.vedit,'String');
        str5 = get(h.scledit,'String');
        str6 = get(h.lineedit,'String');
        fill0 = get(h.arrow,'Value');
        delete(h.fig)

        %  Construct the appropriate plotting string and assemble the callback string
        switch fill0
            case 0
                if isempty(str5) && isempty(str6)
                    plotstr = ['quiverm(',str1,',',str2,',',str3,',',str4,')'];
                elseif isempty(str5) && ~isempty(str6)
                    plotstr = ['quiverm(',str1,',',str2,',',str3,',',str4,',',str6,')'];
                elseif ~isempty(str5) && isempty(str6)
                    plotstr = ['quiverm(',str1,',',str2,',',str3,',',str4,',',str5,')'];
                elseif ~isempty(str5) && ~isempty(str6)
                    plotstr = ['quiverm(',str1,',',str2,',',str3,',',str4,',',str6,',',str5,')'];
                end
            case 1
                fillstr = ' ''filled'' ';
                if isempty(str5) && isempty(str6)
                    plotstr = ['quiverm(',str1,',',str2,',',str3,',',str4,',[],',fillstr,')'];
                elseif isempty(str5) && ~isempty(str6)
                    plotstr = ['quiverm(',str1,',',str2,',',str3,',',str4,',',str6,',[],',fillstr,')'];
                elseif ~isempty(str5) && isempty(str6)
                    plotstr = ['quiverm(',str1,',',str2,',',str3,',',str4,',',str5,',',fillstr,')'];
                elseif ~isempty(str5) && ~isempty(str6)
                    plotstr = ['quiverm(',str1,',',str2,',',str3,',',str4,',',str6,',',str5,',',fillstr,')'];
                end
        end

        try
            evalin('base', plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%--------------------------------------------------------
function h = QuivermUIBox(lat0,lon0,u0,v0,scale0,line0,fill0)
%  QUIVERMUIBOX creates the dialog box and places the appropriate
%  objects for the QUIVERMUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Quiver Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 4],...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.922  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .85  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .85  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.782  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .71  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .71  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  U Text and Edit Box
h.ulabel = uicontrol(h.fig,'Style','Text','String','U Component variable:', ...
    'Units','Normalized','Position', [0.05  0.642  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.uedit = uicontrol(h.fig,'Style','Edit','String', u0, ...
    'Units','Normalized','Position', [0.05  .57  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.ulist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .57  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.uedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  V Text and Edit Box
h.vlabel = uicontrol(h.fig,'Style','Text','String','V Component variable:', ...
    'Units','Normalized','Position', [0.05  0.502  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.vedit = uicontrol(h.fig,'Style','Edit','String', v0, ...
    'Units','Normalized','Position', [0.05  .43  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.vlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .43  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.vedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Scale Text and Edit Box
h.scllabel = uicontrol(h.fig,'Style','Text','String','Scale (optional):', ...
    'Units','Normalized','Position', [0.05  0.34  0.60  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.scledit = uicontrol(h.fig,'Style','Edit','String', scale0, ...
    'Units','Normalized','Position', [0.70  .34  0.25  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',1,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Linespec Text and Edit Box
h.linelabel = uicontrol(h.fig,'Style','Text','String','LineSpec (optional):', ...
    'Units','Normalized','Position', [0.05  0.24  0.60  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lineedit = uicontrol(h.fig,'Style','Edit','String', line0, ...
    'Units','Normalized','Position', [0.70  .24  0.25  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',1,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Filled Arrow Heads Check Box
h.arrow = uicontrol(h.fig,'Style','Check','String','Filled Base Marker', ...
    'Units','Normalized','Position', [0.05  0.14  0.60  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Value',fill0,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.01  0.26  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.01  0.26  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''quivermui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.01  0.26  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%-----------------------------------------------------------------------
function linemui(~,~)
%  LINEMUI creates the dialog box to allow the user to enter in
%  the variable names for a linem command.  It is called when
%  LINEM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Christopher Byrns (age 2) contributed by (get this):
%       One day, MATLAB was open and at the command line when Christopher
%       Byrns decided to bang on the keyboard.  His actions brought
%       up the help window, and ended up on the function ASSIGNIN.M
%       (which was undocumented at the time).  The See Also function
%       for ASSIGNIN.M is EVALIN.M which is key to making these (and
%       similar) dialog boxes work.  Originally, this function
%       used a convoluted hack around with the ChangeFcn property
%       so that the command was executed in the base workspace.
%       EVALIN eliminates this hack.  I had no idea about the
%       existence of ASSIGNIN or EVALIN before the keyboard was smacked.

%  Create axes if none found
if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No')
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = '';
str4 = '';

while 1      %  Loop until no error break or cancel break
    %  Display the variable prompt dialog box
    h = LinemUIBox(str1,str2,str3,str4);
    uiwait(h.fig)

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if ~ishghandle(h.fig)
        return;
    end

    if get(h.fig,'CurrentObject') ~= h.cancel
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.altedit,'String');
        str4 = get(h.propedit,'String');
        delete(h.fig)

        %  Make the other property string into a single row vector.
        %  Eliminate any padding 0s since they mess up a string
        str4 = str4(:)';
        str4 = str4(str4~=0);

        %  Construct the appropriate plotting string and assemble the callback string
        if isempty(str3) && isempty(str4)
            plotstr = ['linem(',str1,',',str2,')'];
        elseif isempty(str3) && ~isempty(str4)
            plotstr = ['linem(',str1,',',str2,',',str4,')'];
        elseif ~isempty(str3) && isempty(str4)
            plotstr = ['linem(',str1,',',str2,',',str3,');'];
        elseif ~isempty(str3) && ~isempty(str4)
            plotstr = ['linem(',str1,',',str2,',',str3,',',str4,');'];
        end

        try
            evalin('base', plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%-----------------------------------------------------------------------
function h = LinemUIBox(lat0,lon0,alt0,prop0)
%  LINEMUIBOX creates the dialog box and places the appropriate
%  objects for the LINEMUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms
PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Line Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 3.3],...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.91  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .82  0.70  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .82  0.18  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.722  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .63  0.70  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .63  0.18  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Altitude Text and Edit Box
h.altlabel = uicontrol(h.fig,'Style','Text','String','Altitude variable (optional):', ...
    'Units','Normalized','Position', [0.05  0.532  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altedit = uicontrol(h.fig,'Style','Edit','String', alt0, ...
    'Units','Normalized','Position', [0.05  .44  0.70  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .44  0.18  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.altedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Other Properties Text and Edit Box
h.proplabel = uicontrol(h.fig,'Style','Text','String','Other Properties:', ...
    'Units','Normalized','Position', [0.05  0.343  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.propedit = uicontrol(h.fig,'Style','Edit','String', prop0, ...
    'Units','Normalized','Position', [0.05  .19  0.90  0.15], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''linemui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%--------------------------------------------------------------------------
function patchesmui(~,~)
%  PATCHESMUI creates the dialog box to allow the user to enter in
%  the variable names for a patchesm command.  It is called when
%  PATCHESM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found
if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = '''red''';
str4 = '';
str5 = '';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box

    h = PatchesmUIBox(str1,str2,str3,str4,str5);  uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.

    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.cdedit,'String');
        str4 = get(h.altedit,'String');
        str5 = get(h.propedit,'String');
        delete(h.fig)

        %  Make the other property string into a single row vector.
        %  Eliminate any padding 0s since they mess up a string

        str5 = str5(:)';
        str5 = str5(str5 ~= 0);

        %  Construct the appropriate plotting string and assemble the callback string

        if isempty(str4) && isempty(str5)
            plotstr = ['patchesm(',str1,',',str2,',',str3,')'];
        elseif isempty(str4) && ~isempty(str5)
            plotstr = ['patchesm(',str1,',',str2,',',str3,',',str5,')'];
        elseif ~isempty(str4) && isempty(str5)
            plotstr = ['patchesm(',str1,',',str2,',',str4,',',str3,')'];
        elseif ~isempty(str4) && ~isempty(str5)
            plotstr = ['patchesm(',str1,',',str2,',',str4,',',str3,',',str5,');'];
        end

        try
            evalin('base', plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%---------------------------------------------------------
function h = PatchesmUIBox(lat0,lon0,cdata0,alt0,prop0)

%  PATCHESMUIBOX creates the dialog box and places the appropriate
%  objects for the PATCHESMUI function.


%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn

h.fig = dialog('Name','Patches Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 3.7], ...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen

shiftwin(h.fig)


%  Latitude Text and Edit Box

h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.925  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .85  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .85  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box

h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.775  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .70  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .70  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Altitude Text and Edit Box

h.altlabel = uicontrol(h.fig,'Style','Text','String','Scalar Altitude (optional):', ...
    'Units','Normalized','Position', [0.05  0.625  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altedit = uicontrol(h.fig,'Style','Edit','String', alt0, ...
    'Units','Normalized','Position', [0.05  .55  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .55  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.altedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Cdata Text and Edit Box

h.cdlabel = uicontrol(h.fig,'Style','Text','String','Face Color:', ...
    'Units','Normalized','Position', [0.05  0.475  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.cdedit = uicontrol(h.fig,'Style','Edit','String', cdata0, ...
    'Units','Normalized','Position', [0.05  .40  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Other Properties Text and Edit Box

h.proplabel = uicontrol(h.fig,'Style','Text','String','Other Properties:', ...
    'Units','Normalized','Position', [0.05  0.325  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.propedit = uicontrol(h.fig,'Style','Edit','String', prop0, ...
    'Units','Normalized','Position', [0.05  .16  0.90  0.16], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog

h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''patchmui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%------------------------------------------------------------
function meshmui(~,~)

%  MESHMUI creates the dialog box to allow the user to enter in
%  the variable names for a meshm command.  It is called when
%  MESHM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found
if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'map';
str2 = 'maplegend';
str3 = '[50 100]';
str4 = '';
str5 = '';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = MeshmUIBox(str1,str2,str3,str4,str5);  uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.mapedit,'String');    %  Get the dialog entries
        str2 = get(h.legedit,'String');
        str3 = get(h.nptsedit,'String');
        str4 = get(h.altedit,'String');
        str5 = get(h.propedit,'String');
        delete(h.fig)

        %  Make the other property string into a single row vector.
        %  Eliminate any padding 0s since they mess up a string
        str5 = str5(:)';
        str5 = str5(str5 ~= 0);

        %  Construct the appropriate plotting string and assemble the callback string
        if isempty(str4) && isempty(str5)
            plotstr = ['meshm(',str1,',',str2,',',str3,')'];
        elseif isempty(str4) && ~isempty(str5)
            plotstr = ['meshm(',str1,',',str2,',',str3,',',str5,')'];
        elseif ~isempty(str4) && isempty(str5)
            plotstr = ['meshm(',str1,',',str2,',',str3,',',str4,')'];
        elseif ~isempty(str4) && ~isempty(str5)
            plotstr = ['meshm(',str1,',',str2,',',str3,',',str4,',',str5,');'];
        end

        try
            evalin('base', plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%------------------------------------------------------------
function h = MeshmUIBox(map0,maplegend0,npts0,alt0,prop0)

%  MESHMUIBOX creates the dialog box and places the appropriate
%  objects for the MESHMUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Mesh Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 3.7], ...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');


% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Map Text and Edit Box
h.maplabel = uicontrol(h.fig,'Style','Text','String','Map variable:', ...
    'Units','Normalized','Position', [0.05  0.925  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.mapedit = uicontrol(h.fig,'Style','Edit','String', map0, ...
    'Units','Normalized','Position', [0.05  .85  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.maplist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .85  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.mapedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Maplegend Text and Edit Box
h.leglabel = uicontrol(h.fig,'Style','Text','String','Maplegend variable:', ...
    'Units','Normalized','Position', [0.05  0.775  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.legedit = uicontrol(h.fig,'Style','Edit','String', maplegend0, ...
    'Units','Normalized','Position', [0.05  .70  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.leglist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .70  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.legedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Npts Text and Edit Box
h.nptslabel = uicontrol(h.fig,'Style','Text','String','Graticule size variable:', ...
    'Units','Normalized','Position', [0.05  0.625  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.nptsedit = uicontrol(h.fig,'Style','Edit','String', npts0, ...
    'Units','Normalized','Position', [0.05  .55  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.nptslist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .55  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.nptsedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Altitude Text and Edit Box
h.altlabel = uicontrol(h.fig,'Style','Text','String','Altitude variable (optional):', ...
    'Units','Normalized','Position', [0.05  0.475  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altedit = uicontrol(h.fig,'Style','Edit','String', alt0, ...
    'Units','Normalized','Position', [0.05  .40  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .40  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.altedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Other Properties Text and Edit Box
h.proplabel = uicontrol(h.fig,'Style','Text','String','Other Properties:', ...
    'Units','Normalized','Position', [0.05  0.325  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.propedit = uicontrol(h.fig,'Style','Edit','String', prop0, ...
    'Units','Normalized','Position', [0.05  .16  0.90  0.16], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''meshmui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%------------------------------------------------------------
function surfacemui(~,~)

%  SURFACEMUI creates the dialog box to allow the user to enter in
%  the variable names for a surfacem command.  It is called when
%  SURFACEM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found
if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = 'map';
str4 = '';
str5 = '';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = SurfmUIBox(str1,str2,str3,str4,str5);  uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.mapedit,'String');
        str4 = get(h.altedit,'String');
        str5 = get(h.propedit,'String');
        delete(h.fig)

        %  Make the other property string into a single row vector.
        %  Eliminate any padding 0s since they mess up a string
        str5 = str5(:)';
        str5(str5 == 0) = [];

        %  Construct the appropriate plotting string and assemble the callback string
        if isempty(str4) && isempty(str5)
            plotstr = ['surfacem(',str1,',',str2,',',str3,')'];
        elseif isempty(str4) && ~isempty(str5)
            plotstr = ['surfacem(',str1,',',str2,',',str3,',',str5,')'];
        elseif ~isempty(str4) && isempty(str5)
            plotstr = ['surfacem(',str1,',',str2,',',str3,',',str4,')'];
        elseif ~isempty(str4) && ~isempty(str5)
            plotstr = ['surfacem(',str1,',',str2,',',str3,',',str4,',',str5,');'];
        end

        try
            evalin('base', plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%--------------------------------------------------------------------------
function h = SurfmUIBox(lat0,lon0,map0,alt0,prop0)

%  SURFMUIBOX creates the dialog box and places the appropriate
%  objects for the SURFMUI function.


%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms
PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Surface Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 3.7], ...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.925  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .85  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .85  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.775  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .70  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .70  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Map Text and Edit Box
h.maplabel = uicontrol(h.fig,'Style','Text','String','Map variable:', ...
    'Units','Normalized','Position', [0.05  0.625  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.mapedit = uicontrol(h.fig,'Style','Edit','String', map0, ...
    'Units','Normalized','Position', [0.05  .55  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.maplist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .55  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.mapedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Altitude Text and Edit Box
h.altlabel = uicontrol(h.fig,'Style','Text','String','Altitude variable (optional):', ...
    'Units','Normalized','Position', [0.05  0.475  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altedit = uicontrol(h.fig,'Style','Edit','String', alt0, ...
    'Units','Normalized','Position', [0.05  .40  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .40  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.altedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Other Properties Text and Edit Box
h.proplabel = uicontrol(h.fig,'Style','Text','String','Other Properties:', ...
    'Units','Normalized','Position', [0.05  0.325  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.propedit = uicontrol(h.fig,'Style','Edit','String', prop0, ...
    'Units','Normalized','Position', [0.05  .16  0.90  0.16], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''surfacemui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%------------------------------------------------------------------
function meshlsrmui(~,~)

%  MESHLSRMUI creates the dialog box to allow the user to enter in
%  the variable names for a MESHLSRM command.  It is called when
%  MESHLSRM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'map';
str2 = 'maplegend';
str3 = '[90 45]';
str4 = '';
str5 = '';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = MeshlsrmUIBox(str1,str2,str3,str4,str5);  uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.mapedit,'String');    %  Get the dialog entries
        str2 = get(h.legedit,'String');
        str3 = get(h.azeledit,'String');
        str4 = get(h.cmapedit,'String');
        str5 = get(h.climedit,'String');
        delete(h.fig)

        %  Construct the appropriate plotting string and assemble the callback string

        str3use = str3;
        str4use = str4;
        str5use = str5;

        if isempty(str3use);
            str3use = '[]';
        end

        if isempty(str4use);
            str4use = '[]';
        end

        if isempty(str5use);
            str5use = '[]';
        end

        plotstr = ['meshlsrm(',str1,',',str2,',',str3use,',',...
            str4use,',',str5use,');'];

        try
            evalin('base', plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%------------------------------------------------------------------
function h = MeshlsrmUIBox(map0,maplegend0,azel0,cmap0,clim0)

%  MESHLSRMUIBOX creates the dialog box and places the appropriate
%  objects for the MESHLSRMUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Shaded Relief Mesh Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[1.5 1 3.5 4], ...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');


%  Map Text and Edit Box
h.maplabel = uicontrol(h.fig,'Style','Text','String','Map variable:', ...
    'Units','Normalized','Position', [0.05  0.92  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.mapedit = uicontrol(h.fig,'Style','Edit','String', map0, ...
    'Units','Normalized','Position', [0.05  .84  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.maplist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .84  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.mapedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Maplegend Text and Edit Box
h.leglabel = uicontrol(h.fig,'Style','Text','String','Maplegend variable:', ...
    'Units','Normalized','Position', [0.05  0.76  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.legedit = uicontrol(h.fig,'Style','Edit','String', maplegend0, ...
    'Units','Normalized','Position', [0.05  .68  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.leglist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .68  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.legedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Azimuth/Elevation Text and Edit Box
h.azellabel = uicontrol(h.fig,'Style','Text','String','Light Source [az, el] (optional):', ...
    'Units','Normalized','Position', [0.05  0.60  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.azeledit = uicontrol(h.fig,'Style','Edit','String', azel0, ...
    'Units','Normalized','Position', [0.05  .52  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.azellist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .52  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.azeledit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Colormap Text and Edit Box
h.cmaplabel = uicontrol(h.fig,'Style','Text','String','Colormap (optional):', ...
    'Units','Normalized','Position', [0.05  0.44  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.cmapedit = uicontrol(h.fig,'Style','Edit','String', cmap0, ...
    'Units','Normalized','Position', [0.05  .36  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.cmaplist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .36  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.cmapedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Color Axis Limits Text and Edit Box
h.climlabel = uicontrol(h.fig,'Style','Text','String','Color Axis Limits (optional):', ...
    'Units','Normalized','Position', [0.05  0.28  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.climedit = uicontrol(h.fig,'Style','Edit','String', clim0, ...
    'Units','Normalized','Position', [0.05  .20  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.climlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .20  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.climedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp4(''initialize'',''meshlsrmui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%----------------------------------------------------------------
function surflsrmui(~,~)

%  SURFLSRMUI creates the dialog box to allow the user to enter in
%  the variable names for a SURFLSRM command.  It is called when
%  SURFLSRM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'lon';
str3 = 'map';
str4 = '';
str5 = '';
str6 = '';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = SurflsrmUIBox(str1,str2,str3,str4,str5,str6);  uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.

    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.mapedit,'String');
        str4 = get(h.azeledit,'String');
        str5 = get(h.cmapedit,'String');
        str6 = get(h.climedit,'String');
        delete(h.fig)

        %  Construct the appropriate plotting string and assemble the callback string
        str4use = str4;
        str5use = str5;
        str6use = str6;

        if isempty(str4use);
            str4use = '[]';
        end

        if isempty(str5use);
            str5use = '[]';
        end

        if isempty(str6use);
            str6use = '[]';
        end

        plotstr = ['surflsrm(',str1,',',str2,',',str3,',',...
            str4use,',',str5use,',',str6use,');'];

        try
            evalin('base', plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%-----------------------------------------------------------------------
function h = SurflsrmUIBox(lat0,lon0,map0,azel0,cmap0,clim0)

%  SURFLSRMUIBOX creates the dialog box and places the appropriate
%  objects for the SURFLSRMUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Shaded Relief Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[1.5 1 3.5 4.5], ...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');


%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.92  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .85  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .85  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.79  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .72  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .72  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Map Text and Edit Box
h.maplabel = uicontrol(h.fig,'Style','Text','String','Map variable:', ...
    'Units','Normalized','Position', [0.05  0.66  0.91  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.mapedit = uicontrol(h.fig,'Style','Edit','String', map0, ...
    'Units','Normalized','Position', [0.05  .59  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.maplist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .59  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.mapedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Azimuth/Elevation Text and Edit Box
h.azellabel = uicontrol(h.fig,'Style','Text','String','Light Source [az, el] (optional):', ...
    'Units','Normalized','Position', [0.05  0.53  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.azeledit = uicontrol(h.fig,'Style','Edit','String', azel0, ...
    'Units','Normalized','Position', [0.05  .46  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.azellist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .46  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.azeledit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Colormap Text and Edit Box
h.cmaplabel = uicontrol(h.fig,'Style','Text','String','Colormap (optional):', ...
    'Units','Normalized','Position', [0.05  0.40  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.cmapedit = uicontrol(h.fig,'Style','Edit','String', cmap0, ...
    'Units','Normalized','Position', [0.05  .33  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.cmaplist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .33  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.cmapedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Color Axis Limits Text and Edit Box
h.climlabel = uicontrol(h.fig,'Style','Text','String','Color Axis Limits (optional):', ...
    'Units','Normalized','Position', [0.05  0.27  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.climedit = uicontrol(h.fig,'Style','Edit','String', clim0, ...
    'Units','Normalized','Position', [0.05  .20  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.climlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .20  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.climedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp4(''initialize'',''surflsrmui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%------------------------------------------------------------------
function contour3mui(~,~)
%CONTOR3MUI Dialog box for contour inputs.
%
%  CONTOR3MUI creates the dialog box to allow the user to enter in the
%  variable names for a contour command.  It is called when CONTOURM or
%  CONTOUR3M is executed with no input arguments.
%
%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found
if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = 'map';
str4 = '';
str5 = '';
popvalu = 1;
flag2d = 1;

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = Contour3mUIBox(str1,str2,str3,str4,str5,flag2d,popvalu);
    uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.mapedit,'String');
        str4 = get(h.lvledit,'String');
        str5 = get(h.propedit,'String');
        flag2d = get(h.mode2d,'Value');
        popvalu = get(h.legpopup,'Value');
        delete(h.fig)

        %  Make the other property string into a single row vector.
        %  Eliminate any padding 0s since they mess up a string
        str5 = str5(:)';
        str5 = str5(str5 ~= 0);

        %  Set the 2D or 3D function name
        if flag2d
            fnname = 'contourm(';
        else
            fnname = 'contour3m(';
        end

        %  Set the plot string prefix and suffix based upon the legend option requested
        switch popvalu
            case 1,     prefix = '';   suffix = '';
            case 2,     prefix = 'clear ans;[ans.c,ans.h]=';
                suffix = 'clabelm(ans.c);clear ans';
            case 3,     prefix = 'clear ans;[ans.c,ans.h]=';
                suffix = 'clabelm(ans.c,ans.h);clear ans';
            case 4,     prefix = 'clear ans;[ans.c,ans.h]=';
                suffix = 'clabelm(ans.c,''manual'');clear ans';
            case 5,     prefix = 'clear ans;[ans.c,ans.h]=';
                suffix = 'clabelm(ans.c,ans.h,''manual'');clear ans';
            case 6,     prefix = 'clear ans;[ans.c,ans.h]=';
                suffix = 'clegendm(ans.c,ans.h,-1);clear ans';
        end

        %  Construct the appropriate plotting string and assemble the callback string
        if isempty(str4) && isempty(str5)
            plotstr = [fnname,str1,',',str2,',',str3,');'];
        elseif isempty(str4) && ~isempty(str5)
            plotstr = [fnname,str1,',',str2,',',str3,',',str5,');'];
        elseif ~isempty(str4) && isempty(str5)
            plotstr = [fnname,str1,',',str2,',',str3,',',str4,');'];
        elseif ~isempty(str4) && ~isempty(str5)
            plotstr = [fnname,str1,',',str2,',',str3,',',str4,',',str5,');'];
        end

        try
            evalin('base',[prefix plotstr suffix]);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%------------------------------------------------------------------
function h = Contour3mUIBox(lat0,lon0,map0,alt0,prop0,flag2d,popvalu)
%  CONTOR3MUIBOX creates the dialog box and places the appropriate
%  objects for the CONTOR3MUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Contour Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 4],...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  2D/3D Radio Buttons
callback = 'set(gco,''Value'',1);set(get(gco,''UserData''),''Value'',0);';

h.modelabel = uicontrol(h.fig,'Style','Text','String','Mode:', ...
    'Units','Normalized','Position', [0.05  0.92  0.20  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);
h.mode2d = uicontrol(h.fig,'Style','Radio','String', '2D', ...
    'Units','Normalized','Position', [0.30  .92  0.17  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, 'Value',flag2d,...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Callback',callback);
h.mode3d = uicontrol(h.fig,'Style','Radio','String', '3D', ...
    'Units','Normalized','Position', [0.50  .92  0.17  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, 'Value',~flag2d,...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Callback',callback);

set(h.mode2d,'UserData',h.mode3d);     %  Set the user data so that the radio callback
set(h.mode3d,'UserData',h.mode2d);     %  functions to make buttons exclusive

%  Map Limit Button
h.limitm = uicontrol(h.fig,'Style','Push','String', 'MLimit', ...
    'Units', 'Normalized','Position', [0.74  0.92  0.24  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack',@limitmui);

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.853  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .78  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .78  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.713  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .64  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .64  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Map Text and Edit Box
h.maplabel = uicontrol(h.fig,'Style','Text','String','Map variable:', ...
    'Units','Normalized','Position', [0.05  0.573  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.mapedit = uicontrol(h.fig,'Style','Edit','String', map0, ...
    'Units','Normalized','Position', [0.05  .50  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.maplist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .50  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.mapedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Levels Text and Edit Box
h.lvllabel = uicontrol(h.fig,'Style','Text','String','Level variable (optional):', ...
    'Units','Normalized','Position', [0.05  0.433  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lvledit = uicontrol(h.fig,'Style','Edit','String', alt0, ...
    'Units','Normalized','Position', [0.05  .36  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lvllist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .36  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lvledit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Legend Text and Popup Menu
h.leglabel = uicontrol(h.fig,'Style','Text','String','Legend:', ...
    'Units','Normalized','Position', [0.05  0.29  0.25  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.legpopup = uicontrol(h.fig,'Style','Popup',...
    'String', ['None|Label Above|Label Inline|Label Above Manual|',...
    'Label Inline Manual|Plot Legend'], ...
    'Units','Normalized','Position', [0.35  .28  0.60  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Value',popvalu,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Other Properties Text and Edit Box
h.proplabel = uicontrol(h.fig,'Style','Text','String','Other Properties:', ...
    'Units','Normalized','Position', [0.05  0.214  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.propedit = uicontrol(h.fig,'Style','Edit','String', prop0, ...
    'Units','Normalized','Position', [0.05  .10  0.90  0.11], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.01  0.26  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.01  0.26  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''contor3mui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.01  0.26  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h);

%--------------------------------------------------------------------
function contourfmui(~,~)
%  CONTOR3MUI creates the dialog box to allow the user to enter in
%  the variable names for a surfacem command.  It is called when
%  CONTOR3M is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found

if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = 'map';
str4 = '';
str5 = '';
popvalu = 1;

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = ContourfmUIBox(str1,str2,str3,str4,str5,popvalu);
    uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.mapedit,'String');
        str4 = get(h.lvledit,'String');
        str5 = get(h.propedit,'String');
        %         flag2d = get(h.mode2d,'Value');
        popvalu = get(h.legpopup,'Value');
        delete(h.fig)

        %  Make the other property string into a single row vector.
        %  Eliminate any padding 0s since they mess up a string

        str5 = str5(:)';
        str5 = str5(str5 ~= 0);

        %  Set the function name
        fnname = 'contourfm(';

        %  Set the plot string prefix and suffix based upon the legend option requested
        switch popvalu
            case 1,     prefix = '';   suffix = '';
            case 2,     prefix = 'clear ans;[ans.c,ans.h]=';
                suffix = 'clabelm(ans.c);clear ans';
            case 3,     prefix = 'clear ans;[ans.c,ans.h]=';
                suffix = 'clabelm(ans.c,ans.h);clear ans';
            case 4,     prefix = 'clear ans;[ans.c,ans.h]=';
                suffix = 'clabelm(ans.c,''manual'');clear ans';
            case 5,     prefix = 'clear ans;[ans.c,ans.h]=';
                suffix = 'clabelm(ans.c,ans.h,''manual'');clear ans';
            case 6,     prefix = 'clear ans;[ans.c,ans.h]=';
                suffix = 'clegendm(ans.c,ans.h,-1);clear ans';
        end

        %  Construct the appropriate plotting string and assemble the callback string
        if isempty(str4) && isempty(str5)
            plotstr = [fnname,str1,',',str2,',',str3,');'];
        elseif isempty(str4) && ~isempty(str5)
            plotstr = [fnname,str1,',',str2,',',str3,',',str5,');'];
        elseif ~isempty(str4) && isempty(str5)
            plotstr = [fnname,str1,',',str2,',',str3,',',str4,');'];
        elseif ~isempty(str4) && ~isempty(str5)
            plotstr = [fnname,str1,',',str2,',',str3,',',str4,',',str5,');'];
        end

        try
            evalin('base',[prefix plotstr suffix]);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%--------------------------------------------------------------------
function h = ContourfmUIBox(lat0,lon0,map0,alt0,prop0,popvalu)

%  CONTOR3MUIBOX creates the dialog box and places the appropriate
%  objects for the CONTOR3MUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Filled Contour Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 4],...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen

shiftwin(h.fig)

%  2D/3D Radio Buttons

% callback = 'set(gco,''Value'',1);set(get(gco,''UserData''),''Value'',0);';
%
% h.modelabel = uicontrol(h.fig,'Style','Text','String','Mode:', ...
%             'Units','Normalized','Position', [0.05  0.92  0.20  0.06], ...
%          'FontWeight','bold',  'FontSize',FontScaling*10, ...
%          'HorizontalAlignment', 'left',...
%          'ForegroundColor', 'black','BackgroundColor', figclr);
% h.mode2d = uicontrol(h.fig,'Style','Radio','String', '2D', ...
%             'Units','Normalized','Position', [0.30  .92  0.17  0.06], ...
%          'FontWeight','bold',  'FontSize',FontScaling*10, 'Value',flag2d,...
%          'HorizontalAlignment', 'left', ...
%          'ForegroundColor', 'black','BackgroundColor', figclr,...
%          'Callback',callback);
% h.mode3d = uicontrol(h.fig,'Style','Radio','String', '3D', ...
%             'Units','Normalized','Position', [0.50  .92  0.17  0.06], ...
%          'FontWeight','bold',  'FontSize',FontScaling*10, 'Value',~flag2d,...
%          'HorizontalAlignment', 'left', ...
%          'ForegroundColor', 'black','BackgroundColor', figclr,...
%          'Callback',callback);
%
% set(h.mode2d,'UserData',h.mode3d);     %  Set the user data so that the radio callback
% set(h.mode3d,'UserData',h.mode2d);     %  functions to make buttons exclusive

%  Map Limit Button
h.limitm = uicontrol(h.fig,'Style','Push','String', 'MLimit', ...
    'Units', 'Normalized','Position', [0.74  0.92  0.24  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','limitm;');

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.853  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .78  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .78  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.713  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .64  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .64  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Map Text and Edit Box
h.maplabel = uicontrol(h.fig,'Style','Text','String','Map variable:', ...
    'Units','Normalized','Position', [0.05  0.573  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.mapedit = uicontrol(h.fig,'Style','Edit','String', map0, ...
    'Units','Normalized','Position', [0.05  .50  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.maplist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .50  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.mapedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Levels Text and Edit Box
h.lvllabel = uicontrol(h.fig,'Style','Text','String','Level variable (optional):', ...
    'Units','Normalized','Position', [0.05  0.433  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lvledit = uicontrol(h.fig,'Style','Edit','String', alt0, ...
    'Units','Normalized','Position', [0.05  .36  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lvllist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .36  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lvledit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Legend Text and Popup Menu
h.leglabel = uicontrol(h.fig,'Style','Text','String','Legend:', ...
    'Units','Normalized','Position', [0.05  0.29  0.25  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.legpopup = uicontrol(h.fig,'Style','Popup',...
    'String', ['None|Label Above|Label Inline|Label Above Manual|',...
    'Label Inline Manual|Plot Legend'], ...
    'Units','Normalized','Position', [0.35  .28  0.60  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Value',popvalu,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Other Properties Text and Edit Box
h.proplabel = uicontrol(h.fig,'Style','Text','String','Other Properties:', ...
    'Units','Normalized','Position', [0.05  0.214  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.propedit = uicontrol(h.fig,'Style','Edit','String', prop0, ...
    'Units','Normalized','Position', [0.05  .10  0.90  0.11], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.01  0.26  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.01  0.26  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''contourfmui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.01  0.26  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%--------------------------------------------------------------------
function quiver3mui(~,~)

%  QUIVER3MUI creates the dialog box to allow the user to enter in
%  the variable names for a quiver3m command.  It is called when
%  QUIVER3M is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found
if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = 'alt';
str4 = 'u';
str5 = 'v';
str6 = 'w';
str7 = '';
str8 = '';
fill0 = 0;

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = Quiver3mUIBox(str1,str2,str3,str4,str5,str6,str7,str8,fill0);  uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.

    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.altedit,'String');
        str4 = get(h.uedit,'String');
        str5 = get(h.vedit,'String');
        str6 = get(h.wedit,'String');
        str7 = get(h.scledit,'String');
        str8 = get(h.lineedit,'String');
        fill0 = get(h.arrow,'Value');
        delete(h.fig)

        %  Construct the appropriate plotting string and assemble the callback string

        switch fill0
            case 0
                if isempty(str7) && isempty(str8)
                    plotstr = ['quiver3m(',str1,',',str2,',',str3,',',str4,',',...
                        str5,',',str6,')'];
                elseif isempty(str7) && ~isempty(str8)
                    plotstr = ['quiver3m(',str1,',',str2,',',str3,',',str4,',',...
                        str5,',',str6,',',str8,')'];
                elseif ~isempty(str7) && isempty(str8)
                    plotstr = ['quiver3m(',str1,',',str2,',',str3,',',str4,',',...
                        str5,',',str6,',',str7,')'];
                elseif ~isempty(str7) && ~isempty(str8)
                    plotstr = ['quiver3m(',str1,',',str2,',',str3,',',str4,',',...
                        str5,',',str6,',',str8,',',str7,')'];
                end
            case 1
                fillstr = ' ''filled'' ';
                if isempty(str7) && isempty(str8)
                    plotstr = ['quiver3m(',str1,',',str2,',',str3,',',str4,',',...
                        str5,',',str6,',[],',fillstr,')'];
                elseif isempty(str7) && ~isempty(str8)
                    plotstr = ['quiver3m(',str1,',',str2,',',str3,',',str4,',',...
                        str5,',',str6,',',str8,',[],',fillstr,')'];
                elseif ~isempty(str7) && isempty(str8)
                    plotstr = ['quiver3m(',str1,',',str2,',',str3,',',str4,',',...
                        str5,',',str6,',',str7,',',fillstr,')'];
                elseif ~isempty(str7) && ~isempty(str8)
                    plotstr = ['quiver3m(',str1,',',str2,',',str3,',',str4,',',...
                        str5,',',str6,',',str8,',',str7,',',fillstr,')'];
                end
        end

        try
            evalin('base', plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%----------------------------------------------------------------------
function h = Quiver3mUIBox(lat0,lon0,alt0,u0,v0,w0,scale0,line0,fill0)

%  QUIVER3MUIBOX creates the dialog box and places the appropriate
%  objects for the QUIVER3MUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Quiver3 Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 4.5],...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.942  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .88  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .88  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.822  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .76  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .76  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Altitude Text and Edit Box
h.altlabel = uicontrol(h.fig,'Style','Text','String','Altitude variable:', ...
    'Units','Normalized','Position', [0.05  0.702  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altedit = uicontrol(h.fig,'Style','Edit','String', alt0, ...
    'Units','Normalized','Position', [0.05  .64  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .64  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.altedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  U Text and Edit Box
h.ulabel = uicontrol(h.fig,'Style','Text','String','U Component variable:', ...
    'Units','Normalized','Position', [0.05  0.582  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.uedit = uicontrol(h.fig,'Style','Edit','String', u0, ...
    'Units','Normalized','Position', [0.05  .52  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.ulist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .52  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.uedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  V Text and Edit Box
h.vlabel = uicontrol(h.fig,'Style','Text','String','V Component variable:', ...
    'Units','Normalized','Position', [0.05  0.462  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.vedit = uicontrol(h.fig,'Style','Edit','String', v0, ...
    'Units','Normalized','Position', [0.05  .40  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.vlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .40  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.vedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  W Text and Edit Box
h.wlabel = uicontrol(h.fig,'Style','Text','String','W Component variable:', ...
    'Units','Normalized','Position', [0.05  0.342  0.90  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.wedit = uicontrol(h.fig,'Style','Edit','String', w0, ...
    'Units','Normalized','Position', [0.05  .28  0.70  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.wlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .28  0.18  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.wedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Scale Text and Edit Box
h.scllabel = uicontrol(h.fig,'Style','Text','String','Scale (optional):', ...
    'Units','Normalized','Position', [0.05  0.22  0.60  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.scledit = uicontrol(h.fig,'Style','Edit','String', scale0, ...
    'Units','Normalized','Position', [0.70  .22  0.25  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',1,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Linespec Text and Edit Box
h.linelabel = uicontrol(h.fig,'Style','Text','String','LineSpec (optional):', ...
    'Units','Normalized','Position', [0.05  0.15  0.60  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lineedit = uicontrol(h.fig,'Style','Edit','String', line0, ...
    'Units','Normalized','Position', [0.70  .15  0.25  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',1,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Filled Arrow Heads Check Box
h.arrow = uicontrol(h.fig,'Style','Check','String','Filled Base Marker', ...
    'Units','Normalized','Position', [0.05  0.08  0.60  0.05], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Value',fill0,...
    'ForegroundColor', 'black','BackgroundColor', figclr);


%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.01  0.26  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.01  0.26  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''quiver3mui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.01  0.26  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%------------------------------------------------------------------
function stem3mui(~,~)

%  STEM3MUI creates the dialog box to allow the user to enter in
%  the variable names for a stem3m command.  It is called when
%  STEM3M is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found
if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = 'z';
str4 = '';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = Stem3mUIBox(str1,str2,str3,str4);  uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.

    if get(h.fig,'CurrentObject') ~= h.cancel
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.altedit,'String');
        str4 = get(h.propedit,'String');
        delete(h.fig)

        %  Make the other property string into a single row vector.
        %  Eliminate any padding 0s since they mess up a string
        str4 = str4(:)';
        str4 = str4(str4 ~= 0);

        %  Construct the appropriate plotting string and assemble the callback string

        if isempty(str4)
            plotstr = ['stem3m(',str1,',',str2,',',str3,');'];
        else
            plotstr = ['stem3m(',str1,',',str2,',',str3,',',str4,');'];
        end

        try
            evalin('base',plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%------------------------------------------------------------------
function h = Stem3mUIBox(lat0,lon0,z0,prop0)
%  STEM3MUIBOX creates the dialog box and places the appropriate
%  objects for the STEM3MUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Stem Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 3.3],...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.91  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .82  0.70  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .82  0.18  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.722  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .63  0.70  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .63  0.18  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Count Text and Edit Box
h.altlabel = uicontrol(h.fig,'Style','Text','String','Stem Height Variable:', ...
    'Units','Normalized','Position', [0.05  0.532  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altedit = uicontrol(h.fig,'Style','Edit','String', z0, ...
    'Units','Normalized','Position', [0.05  .44  0.70  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .44  0.18  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.altedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Other Properties Text and Edit Box
h.proplabel = uicontrol(h.fig,'Style','Text','String','Other Properties:', ...
    'Units','Normalized','Position', [0.05  0.343  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.propedit = uicontrol(h.fig,'Style','Edit','String', prop0, ...
    'Units','Normalized','Position', [0.05  .19  0.90  0.15], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''stem3mui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%-------------------------------------------------------------------
function scattermui(~,~)

%  SCATTERMUI creates the dialog box to allow the user to enter in
%  the variable names for a scatterm command.  It is called when
%  SCATTERM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found
if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = '';
str4 = '';
str5 ='''o''';
str6 = 'notfilled';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = scattermUIBox(str1,str2,str3,str4,str5,str6);  uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.altedit,'String');
        str4 = get(h.coloredit,'String');
        
        pick_list = get(h.markpopup, 'String');
        selection = get(h.markpopup, 'Value');
        str5 = ['''' pick_list{selection} ''''];
        
        str6 = '';
        if get(h.fillcheck,'Value');
            str6 = '''filled''';
        end
        delete(h.fig)

        %  Construct the appropriate plotting string and assemble the callback
        %  string
        str = {...
            str1, ',';
            str2, ',';
            str3, ',';
            str4, ',';
            str5, ',';
            str6, ','}';

        str(:,cellfun(@isempty,str(1,:))) = [];
        str = [str{:}];
        str(end) = [];  % Remove trailing comma

        plotstr = ['scatterm(' str ');'];

        try
            evalin('base',plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%--------------------------------------------------------------------
function h = scattermUIBox(lat0,lon0,z0,color0,style0,fill0)

%  SCATTERMUIBOX creates the dialog box and places the appropriate
%  objects for the SCATTERMUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Scatter Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 3.7], ...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');


% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.925  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .85  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .85  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.775  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .70  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .70  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Count Data Text and Edit Box
h.altlabel = uicontrol(h.fig,'Style','Text','String','Marker size (optional):', ...
    'Units','Normalized','Position', [0.05  0.625  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altedit = uicontrol(h.fig,'Style','Edit','String', z0, ...
    'Units','Normalized','Position', [0.05  .55  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .55  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.altedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Color Data Text and Edit Box
h.colorlabel = uicontrol(h.fig,'Style','Text','String','Marker color (optional):', ...
    'Units','Normalized','Position', [0.05 0.475  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.coloredit = uicontrol(h.fig,'Style','Edit','String', color0, ...
    'Units','Normalized','Position', [0.05  .40  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.colorlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .40  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.coloredit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Marker Style Text and Edit Box
h.marklabel = uicontrol(h.fig,'Style','Text','String','Marker Style:', ...
    'Units','Normalized','Position', [0.05  0.3  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

strings={'+','o','*','.','x','v','^','>','<'};

indx = (style0 == ''''); style0(indx) = []; % strip quotes
indx = find(strcmp(style0,strings));

h.markpopup = uicontrol(h.fig,'Style','popup','String', strings, 'Value',indx, ...
    'Units','Normalized','Position', [0.2  .25-0.025  0.25  0.07], ...
    'FontSize',FontScaling*10,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Fill labels checkbox
fvalue = 0;
if strcmp('filled',fill0);
    fvalue = 1;
end

h.fillcheck = uicontrol(h.fig,'Style','check',  'Value',fvalue,'String','Filled',...
    'Units','Normalized','Position', [0.55  .245-0.025  0.25  0.075], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Min',0,'Max',1,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''scattermui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%-------------------------------------------------------------------------
function textmui(~,~)

%  TEXTMUI creates the dialog box to allow the user to enter in
%  the variable names for a surfacem command.  It is called when
%  TEXTM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found
if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = '';
str2 = 'lat';
str3 = 'long';
str4 = '';
str5 = '';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = TextmUIBox(str1,str2,str3,str4,str5);  uiwait(h.fig)

    if ~ishghandle(h.fig);
        return;
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.

    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.txtedit,'String');    %  Get the dialog entries
        str2 = get(h.latedit,'String');
        str3 = get(h.lonedit,'String');
        str4 = get(h.altedit,'String');
        str5 = get(h.propedit,'String');
        delete(h.fig)

        %  Make the other property string into a single row vector.
        %  Eliminate any padding 0s since they mess up a string
        str5 = str5(:)';
        str5 = str5(str5 ~= 0);

        %  Construct the appropriate plotting string and assemble the callback
        %  string
        if isempty(str4) && isempty(str5)
            plotstr = ['textm(',str2,',',str3,',',str1,')'];
        elseif isempty(str4) && ~isempty(str5)
            plotstr = ['textm(',str2,',',str3,',',str1,',',str5,')'];
        elseif ~isempty(str4) && isempty(str5)
            plotstr = ['textm(',str2,',',str3,',',str4,',',str1,')'];
        elseif ~isempty(str4) && ~isempty(str5)
            plotstr = ['textm(',str2,',',str3,',',str4,',',str1,',',str5,');'];
        end

        try
            evalin('base',plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%---------------------------------------------------------------------
function h = TextmUIBox(text0,lat0,lon0,alt0,prop0)

%  TEXTMUIBOX creates the dialog box and places the appropriate
%  objects for the TEXTMUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Text Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 3.7], ...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Text Variable Text and Edit Box
h.txtlabel = uicontrol(h.fig,'Style','Text','String','Text variable/string:', ...
    'Units','Normalized','Position', [0.05  0.925  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.txtedit = uicontrol(h.fig,'Style','Edit','String', text0, ...
    'Units','Normalized','Position', [0.05  .85  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.txtlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .85  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.txtedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.775  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .70  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .70  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.625  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .55  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .55  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Altitude Text and Edit Box
h.altlabel = uicontrol(h.fig,'Style','Text','String','Scalar Altitude (optional):', ...
    'Units','Normalized','Position', [0.05  0.475  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altedit = uicontrol(h.fig,'Style','Edit','String', alt0, ...
    'Units','Normalized','Position', [0.05  .40  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .40  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.altedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Other Properties Text and Edit Box
h.proplabel = uicontrol(h.fig,'Style','Text','String','Other Properties:', ...
    'Units','Normalized','Position', [0.05  0.325  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.propedit = uicontrol(h.fig,'Style','Edit','String', prop0, ...
    'Units','Normalized','Position', [0.05  .16  0.90  0.16], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''textmui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%----------------------------------------------------------------------
function lightmui(~,~)
%  LIGHTMUI creates the dialog box to allow the user to enter in
%  the variable names for a lightm command.  It is called when
%  LIGHTM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found
if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return;
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return;
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = 'z';
clrs = [1 1 1];
mode0 = 0;
str5 = '';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = LightmUIBox(str1,str2,str3,mode0,clrs,str5);
    uiwait(h.fig)

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if ~ishghandle(h.fig);
        return;
    end

    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.altedit,'String');
        str5 = get(h.propedit,'String');
        mode0 = get(h.mode,'Value');
        clrstruct = get(h.lgtpopup,'UserData');
        clrs = clrstruct.val;
        delete(h.fig)

        %  Make the other property string into a single row vector.
        %  Eliminate any padding 0s since they mess up a string
        str5 = str5(:)';
        str5 = str5(str5 ~= 0);

        %  Set the mode string
        if mode0;
            modestr = ' ''style'',''infinite'' ';
        else
            modestr = ' ''style'',''local'' ';
        end

        %  Set the color property string then concatenate with mode string
        clrstr =  [' ''color'', [',num2str(clrs),' ]' ];
        propstr = [modestr, ',',clrstr];

        %  Construct the appropriate plotting string and assemble the callback
        %  string
        if mode0
            if  isempty(str5)
                plotstr = ['lightm(',str1,',',str2,',',propstr,');'];
            else
                plotstr = ['lightm(',str1,',',str2,',',propstr,',',str5,');'];
            end
        else
            if      isempty(str3) &&  isempty(str5)
                plotstr = ['lightm(',str1,',',str2,',',propstr,');'];
            elseif  isempty(str3) && ~isempty(str5)
                plotstr = ['lightm(',str1,',',str2,',',propstr,',',str5,');'];
            elseif ~isempty(str3) &&  isempty(str5)
                plotstr = ['lightm(',str1,',',str2,',',str3,',',propstr,');'];
            elseif ~isempty(str3) && ~isempty(str5)
                plotstr = ['lightm(',str1,',',str2,',',str3,',',propstr,',',str5,');'];
            end
        end

        try
            evalin('base',plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'));
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%-----------------------------------------------------------------------
function h = LightmUIBox(lat0,lon0,alt0,mode0,clr0,prop0)

%  LIGHTMUIBOX creates the dialog box and places the appropriate
%  objects for the LIGHTMUI function.

%  Construct the light color rgb values and popup menu items
%  The structure lightclr is needed to work with clrpopup

LightColors  = {'custom','black','white','red','cyan','green',...
    'yellow','blue','magenta'};
lightclr.rgb = [NaN NaN NaN; 0 0 0; 1 1 1; 1 0 0; 0 1 1;
    0 1 0; 1 1 0; 0 0 1; 1 0 1];

lightpopup = find(lightclr.rgb(:,1)==clr0(1) & lightclr.rgb(:,2)==clr0(2) & ...
    lightclr.rgb(:,3)==clr0(3));
if isempty(lightpopup);
    lightpopup = 1;
    lightclr.val = clr0;
else
    lightclr.val = lightclr.rgb(lightpopup,:);
end

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms
PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Light Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 3.9],...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.925  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .85  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .85  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.775  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .70  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .70  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Altitude Text and Edit Box
h.altlabel = uicontrol(h.fig,'Style','Text','String','Altitude variable:', ...
    'Units','Normalized','Position', [0.05  0.625  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altedit = uicontrol(h.fig,'Style','Edit','String', alt0, ...
    'Units','Normalized','Position', [0.05  .55  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .55  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.altedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Mode Check Box
h.mode = uicontrol(h.fig,'Style','Check','String', 'Light at Infinity', ...
    'Units','Normalized','Position', [0.05  0.47  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Value',mode0,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Light Color Text and Popup Menu
h.lgtlabel = uicontrol(h.fig,'Style','Text','String','Color:', ...
    'Units','Normalized','Position', [0.05  0.38  0.22  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lgtpopup = uicontrol(h.fig,'Style','Popup', 'String',LightColors, ...
    'Units','Normalized', 'Position',[0.32  0.38  0.45  0.07], ...
    'Value', lightpopup, 'UserData',lightclr, ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment','left', 'Interruptible','on',...
    'ForegroundColor','black', 'BackgroundColor',figclr,...
    'CallBack','clrpopup');

%  Other Properties Text and Edit Box
h.proplabel = uicontrol(h.fig,'Style','Text','String','Other Properties:', ...
    'Units','Normalized','Position', [0.05  0.302  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.propedit = uicontrol(h.fig,'Style','Edit','String', prop0, ...
    'Units','Normalized','Position', [0.05  .16  0.90  0.14], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''lightmui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%---------------------------------------------------------------------

function surflmui(~,~)
%  SURFLMUI creates the dialog box to allow the user to enter in
%  the variable names for a surflm command.  It is called when
%  SURFLM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found

if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return
    end
end

%  Initialize the entries of the dialog box
str1 = 'lat';
str2 = 'long';
str3 = 'map';
str4 = '';
str5 = '';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = SurflmUIBox(str1,str2,str3,str4,str5);  uiwait(h.fig)

    if ~ishghandle(h.fig)
        return
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.mapedit,'String');
        str4 = get(h.lgtedit,'String');
        str5 = get(h.cofedit,'String');
        delete(h.fig)

        %  Construct the appropriate plotting string and assemble the callback
        %  string
        if isempty(str4) && isempty(str5)
            plotstr = ['surflm(',str1,',',str2,',',str3,')'];
        elseif isempty(str4) && ~isempty(str5)
            plotstr = ['surflm(',str1,',',str2,',',str3,',[],',str5,')'];
        elseif ~isempty(str4) && isempty(str5)
            plotstr = ['surflm(',str1,',',str2,',',str3,',',str4,')'];
        elseif ~isempty(str4) && ~isempty(str5)
            plotstr = ['surflm(',str1,',',str2,',',str3,',',str4,',',str5,');'];
        end

        try
            evalin('base',plotstr);
            break;            
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%-----------------------------------------------------------------
function h = SurflmUIBox(lat0,lon0,map0,s0,k0)
%  SURFLMUIBOX creates the dialog box and places the appropriate
%  objects for the SURFLMUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms

PixelFactor = guifactm('pixels');
FontScaling = guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Surfl Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 3.7], ...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.915  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .84  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .84  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.745  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .67  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .67  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Map Text and Edit Box
h.maplabel = uicontrol(h.fig,'Style','Text','String','Map variable:', ...
    'Units','Normalized','Position', [0.05  0.575  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.mapedit = uicontrol(h.fig,'Style','Edit','String', map0, ...
    'Units','Normalized','Position', [0.05  .50  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.maplist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .50  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.mapedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Light Text and Edit Box
h.lgtlabel = uicontrol(h.fig,'Style','Text','String','Light Location (optional):', ...
    'Units','Normalized','Position', [0.05  0.405  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lgtedit = uicontrol(h.fig,'Style','Edit','String', s0, ...
    'Units','Normalized','Position', [0.05  .33  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lgtlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .33  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lgtedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Coefficients Text and Edit Box
h.coflabel = uicontrol(h.fig,'Style','Text','String','Coefficients:', ...
    'Units','Normalized','Position', [0.05  0.235  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.cofedit = uicontrol(h.fig,'Style','Edit','String', k0, ...
    'Units','Normalized','Position', [0.05  .16  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.coflist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .16  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.cofedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''surflmui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%----------------------------------------------------------------------

function symbolmui(~,~)
%  SYMBOLMUI creates the dialog box to allow the user to enter in
%  the variable names for a symbolm command.  It is called when
%  SYMBOLM is executed with no input arguments.

%  Define map for current axes if necessary.  Note that if the
%  user cancels this operation, the display dialog is aborted.

%  Create axes if none found

if isempty(get(get(0,'CurrentFigure'),'CurrentAxes'))
    Btn = questdlg('Create Map Axes in Current Figure?','No Map Axes',...
        'Yes','No','Yes');
    if strcmp(Btn,'No');
        return
    end
    axes;
end

%  Create map definition if necessary
if ~ismap
    cancelflag = axesm;
    if cancelflag;
        clma purge;
        return
    end
end

%  Initialize the entries of the dialog box

str1 = 'lat';
str2 = 'long';
str3 = 'z';
str4 = '''.''';
str5 = '';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = SymbolmUIBox(str1,str2,str3,str4,str5);
    uiwait(h.fig)

    if ~ishghandle(h.fig);
        return
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.latedit,'String');    %  Get the dialog entries
        str2 = get(h.lonedit,'String');
        str3 = get(h.altedit,'String');
        str4 = get(h.markedit,'String');
        str5 = get(h.propedit,'String');
        delete(h.fig)

        %  Make the other property string into a single row vector.
        %  Eliminate any padding 0s since they mess up a string
        str5 = str5(:)';
        str5 = str5(str5 ~= 0);

        %  Construct the appropriate plotting string and assemble the callback string
        warnstate = warning('off','map:symbolm:symbolmObsolete');

        if isempty(str5)
            plotstr = ['symbolm(',str1,',',str2,',',str3,',',str4,')'];
        else
            plotstr = ['symbolm(',str1,',',str2,',',str3,',',str4,',',str5,');'];
        end

        warning(warnstate)

        try
            evalin('base',plotstr);
            break;
        catch e
            uiwait(errordlg(e.message,'Map Projection Error','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%---------------------------------------------------------------------
function h = SymbolmUIBox(lat0,lon0,z0,style0,prop0)
%  SYMBOLMUIBOX creates the dialog box and places the appropriate
%  objects for the SYMBOLMUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms
PixelFactor = guifactm('pixels');
FontScaling = guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Symbol Map Input',...
    'Units','Points',  'Position',PixelFactor*72*[2 1 3 3.7], ...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');


% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Latitude variable:', ...
    'Units','Normalized','Position', [0.05  0.925  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .85  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .85  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Longitude variable:', ...
    'Units','Normalized','Position', [0.05  0.775  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .70  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .70  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Count Data Text and Edit Box
h.altlabel = uicontrol(h.fig,'Style','Text','String','Marker size variable:', ...
    'Units','Normalized','Position', [0.05  0.625  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altedit = uicontrol(h.fig,'Style','Edit','String', z0, ...
    'Units','Normalized','Position', [0.05  .55  0.70  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.altlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .55  0.18  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.altedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Marker Style Text and Edit Box
h.marklabel = uicontrol(h.fig,'Style','Text','String','Marker Style:', ...
    'Units','Normalized','Position', [0.05  0.475  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.markedit = uicontrol(h.fig,'Style','Edit','String', style0, ...
    'Units','Normalized','Position', [0.05  .40  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'left', 'Max',1, ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Other Properties Text and Edit Box
h.proplabel = uicontrol(h.fig,'Style','Text','String','Other Properties:', ...
    'Units','Normalized','Position', [0.05  0.325  0.90  0.06], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.propedit = uicontrol(h.fig,'Style','Edit','String', prop0, ...
    'Units','Normalized','Position', [0.05  .16  0.90  0.16], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', 'Max',2,...
    'ForegroundColor', 'black','BackgroundColor', figclr);

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''symbolmui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)

%----------------------------------------------------------------------

function limitmui(~,~)
%  LIMITMUI creates the dialog box to allow the user to enter in
%  the variable names for a limitm command.  It is called when
%  LIMITM is executed with no input arguments.

%  Initialize the entries of the dialog box

str1 = 'map';
str2 = 'maplegend';
str3 = 'latlim';
str4 = 'lonlim';

while 1      %  Loop until no error break or cancel break

    %  Display the variable prompt dialog box
    h = LimitmUIBox(str1,str2,str3,str4);  uiwait(h.fig)

    if ~ishghandle(h.fig);
        return
    end

    %  If the accept button is pushed, build up the command string and
    %  evaluate it in the base workspace.  Delete the modal dialog box
    %  before evaluating the command so that the proper axes are used.
    %  The proper axes were current before the modal dialog was created.
    if get(h.fig,'CurrentObject') == h.apply
        str1 = get(h.mapedit,'String');    %  Get the dialog entries
        str2 = get(h.legedit,'String');
        str3 = get(h.latedit,'String');
        str4 = get(h.lonedit,'String');
        delete(h.fig)

        %  Construct the appropriate plotting string and assemble the callback
        %  string
        fcnstr = ['[',str3,',',str4,']=limitm(',str1,',',str2,');'];

        try
             evalin('base',fcnstr);
             break;
        catch e
            uiwait(errordlg(e.message,'Map Limit Computation','modal'))
        end
    else
        delete(h.fig)     %  Close the modal dialog box
        break             %  Exit the loop
    end
end

%-----------------------------------------------------------------------
function h = LimitmUIBox(map0,maplegend0,lat0,lon0)
%  LIMITMUIBOX creates the dialog box and places the appropriate
%  objects for the LIMITMUI function.

%  Compute the Pixel and Font Scaling Factors so
%  GUI figure windows and fonts look OK across all platforms
PixelFactor = guifactm('pixels');
FontScaling =  guifactm('fonts');

%  Create the dialog box.  Make visible when all objects are drawn
h.fig = dialog('Name','Map Limit Input',...
    'Units','Points',  'Position',PixelFactor*72*[2.5 1.5 3 3.3],...
    'Visible','off');
colordef(h.fig,'white');
figclr = get(h.fig,'Color');

% shift window if it comes up partly offscreen
shiftwin(h.fig)

%  Map Text and Edit Box
h.maplabel = uicontrol(h.fig,'Style','Text','String','Map variable:', ...
    'Units','Normalized','Position', [0.05  0.91  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.mapedit = uicontrol(h.fig,'Style','Edit','String', map0, ...
    'Units','Normalized','Position', [0.05  .82  0.70  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.maplist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .82  0.18  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.mapedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Maplegend Text and Edit Box
h.leglabel = uicontrol(h.fig,'Style','Text','String','Maplegend variable:', ...
    'Units','Normalized','Position', [0.05  0.722  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.legedit = uicontrol(h.fig,'Style','Edit','String', maplegend0, ...
    'Units','Normalized','Position', [0.05  .63  0.70  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.leglist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .63  0.18  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.legedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Latitude Text and Edit Box
h.latlabel = uicontrol(h.fig,'Style','Text','String','Output Latitude limit:', ...
    'Units','Normalized','Position', [0.05  0.502  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left',...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latedit = uicontrol(h.fig,'Style','Edit','String', lat0, ...
    'Units','Normalized','Position', [0.05  .41  0.70  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.latlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .41  0.18  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.latedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Longitude Text and Edit Box
h.lonlabel = uicontrol(h.fig,'Style','Text','String','Output Longitude limit:', ...
    'Units','Normalized','Position', [0.05  0.303  0.90  0.07], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonedit = uicontrol(h.fig,'Style','Edit','String', lon0, ...
    'Units','Normalized','Position', [0.05  .20  0.70  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'black','BackgroundColor', figclr);

h.lonlist = uicontrol(h.fig,'Style','Push','String', 'List', ...
    'Units','Normalized','Position', [0.77  .20  0.18  0.09], ...
    'FontWeight','bold',  'FontSize',FontScaling*9, ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'Interruptible','on', 'UserData',h.lonedit,...
    'CallBack','varpick(who,get(gco,''UserData''))');

%  Buttons to exit the modal dialog
h.apply = uicontrol(h.fig,'Style','Push','String', 'Apply', ...
    'Units', 'Normalized','Position', [0.06  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','uiresume');

h.help = uicontrol(h.fig,'Style','Push','String', 'Help', ...
    'Units', 'Normalized','Position', [0.37  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10,...
    'HorizontalAlignment', 'center', 'Interruptible','on',...
    'ForegroundColor', 'black', 'BackgroundColor', figclr,...
    'CallBack','maphlp1(''initialize'',''limitmui'')');

h.cancel = uicontrol(h.fig,'Style','Push','String', 'Cancel', ...
    'Units', 'Normalized','Position', [0.68  0.02  0.26  0.10], ...
    'FontWeight','bold',  'FontSize',FontScaling*10, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'black','BackgroundColor', figclr,...
    'CallBack','uiresume');

set(h.fig,'Visible','on','UserData',h)
